<!--suppress XmlUnboundNsPrefix -->
<configuration scan="true" scanPeriod="30 seconds">

    <appender name="FILE" class="ch.qos.logback.core.FileAppender">
        <file>simulation.log</file>

        <encoder>
            <pattern>%date %level <!--[%thread]--> <!--%logger{10}--> [%-20file:%3line{40}] %msg%n</pattern>
        </encoder>
    </appender>

    <!-- todo need new file per game - emit it in the file name / put one directory under current
         probably can use MDC with a replacement parameter in the file name
         https://logback.qos.ch/manual/mdc.html

         To separate/sift log messages to different files depending on a runtime attribute, you might want to use ch.qos.logback.classic.sift.SiftingAppender.

          In a nutshell, this allows you to set up a FileAppender (or any other appender)
          with <file>${userid}.log</file> where ${userId} is substituted based on the MDC
          (Mapped Diagnostic Context) (e.g., MDC.put("userid", "Alice");). See the first link for the complete example.
         -->
    <appender name="JSON" class="ch.qos.logback.core.FileAppender">
        <file>simulation_json.log</file>
        <encoder>
            <pattern>%msg%n</pattern>
        </encoder>
    </appender>


    <appender name="ASYNC" class="ch.qos.logback.classic.AsyncAppender">
        <discardingThreshold>0</discardingThreshold>
        <appender-ref ref="JSON" />
    </appender>

    <logger name="json" additivity="false">
        <appender-ref ref="ASYNC" />
    </logger>

    <root level="debug">
        <appender-ref ref="FILE" />
    </root>

</configuration>